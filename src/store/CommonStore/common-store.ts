import {makeAutoObservable} from 'mobx';import {LoadingEnum} from "../types/types";export class CommonStore {    isLoading: LoadingEnum = LoadingEnum.fetching;    isLocalLoading: LoadingEnum = LoadingEnum.initial;    serverResponseText: string | undefined = '';    setIsLoading = (isLoading: LoadingEnum): void => {        this.isLoading = isLoading;    };    setLocalLoading = (isLoading: LoadingEnum): void => {        this.isLocalLoading = isLoading;    };    setServerErrorText = (text: string): void => {        this.serverResponseText = text;    };    setServerResponse = (        payload: {            serverResponse?: string | undefined,            status?: string        }    ): void => {        const {serverResponse, status} = payload        if (status === 'ok') return        if (serverResponse && status === 'error') {            this.setServerErrorText(serverResponse)            return        }        if (serverResponse) {            this.setServerErrorText(serverResponse)        }    };    constructor() {        makeAutoObservable(this)    }}export default new CommonStore();